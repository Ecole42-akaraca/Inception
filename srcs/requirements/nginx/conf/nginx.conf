server {
	listen 443 ssl;
	listen [::]:443 ssl;
	server_name akaraca.42.fr;

	ssl_certificate  /etc/ssl/certs/nginx.crt;
	ssl_certificate_key /etc/ssl/private/nginx.key;
	ssl_protocols  TLSv1.2 TLSv1.3;

	root /var/www/html;
	index index.php index.nginx-debian.html;

	location / {
	try_files $uri $uri/ /index.php$is_args$args;
	}

	location ~ \.php$ {
	fastcgi_split_path_info ^(.+\.php)(/.+)$;
		fastcgi_pass wordpress:9000;
		fastcgi_index index.php;
		include fastcgi_params;
		fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
		fastcgi_param SCRIPT_NAME $fastcgi_script_name;
		fastcgi_param PATH_INFO $fastcgi_path_info;
	}

	location ~ ^/adminer(/.*$|$) {
		fastcgi_index index.php;
		include /etc/nginx/fastcgi_params;
		fastcgi_param SCRIPT_FILENAME /var/www/html/index.php;
		fastcgi_pass adminer:9000;
	}
}

################################################################### INFO ####################################################################

### for Nginx helpful sites ###
# https://www.nginx.com/resources/wiki/start/topics/examples/full/
# https://www.coderrocketfuel.com/article/default-nginx-configuration-file-inside-sites-available-default
# https://wordpress.org/documentation/article/nginx/
# https://www.hafifbilgiler.com/hafif-bilgiler/yazilim/linux/liniux-uzerinde-nginx-kurulumu/

### nginx.conf with comment ###

# 'server': bloÄŸu, Nginx sunucusunun nasÄ±l davranacaÄŸÄ±nÄ± ve hangi taleplere nasÄ±l cevap vereceÄŸini belirten ana yapÄ±dÄ±r.
#	Belirli, bir IP adresi veya alan adÄ± Ã¼zerinden gelen isteklere yanÄ±t vermek iÃ§in kullanÄ±lÄ±r.
# ğŸ“Œserver {
#
# 	'listen 443 ssl;' ifadesi, Nginx'in 443 numaralÄ± baÄŸlantÄ± noktasÄ±ndan gelen SSL/TLS ÅŸifrelemeli istekleri dinlemesi gerektiÄŸini ifade eder.
#		SSL/TLS ÅŸifrelemesi, iletiÅŸimi ÅŸifrelemek ve gÃ¼venli hale getirmek iÃ§in kullanÄ±lÄ±r.
#		443 numalaralÄ± baÄŸlantÄ± noktasÄ±, genellikle HTTPS protokolÃ¼ tarafÄ±ndan kullanÄ±lÄ±r.
#  	EÄŸerki 'listen 443;' ÅŸeklinde kullanÄ±lsaydÄ±, belirtilen baÄŸlantÄ± noktasÄ± Ã¼zerinden gelen istekler ÅŸifrelenmez.
#		Yani bu ÅŸekilde kullanÄ±ldÄ±ÄŸÄ±nda, Nginx'in gÃ¼venli bir HTTPS baÄŸlantÄ±sÄ± saÄŸlamak iÃ§in SSL/TLS ÅŸifrelemesi kullanmaz.
#		EÄŸer kullanÄ±cÄ±lardan hassas bilgilerin toplandÄ±ÄŸÄ±, gÃ¼venliÄŸi Ã¶nemli olan bir web sitesi veya uygulamanÄ±z varsa, HTTPS Ã¼zerinden gÃ¼venli iletiÅŸim saÄŸlamak Ã¶nemlidir.
#		HTTPS kullanÄ±mÄ±, Ã¶zellikle gÃ¼venlik ve veri gizliliÄŸi Ã¶nemli olan web siteleri iÃ§in ÅŸiddetle tavsiye edilir.
#	ğŸ“Œlisten 443 ssl;
#
# 	'listen [::]443 ssl;' ifadesi, Nginx'in IPv6 desteÄŸini aktif ettiÄŸini ve yine 443 numaralÄ± baÄŸlantÄ± noktasÄ±ndan gelen SSL/TLS ÅŸifrelemeli istekleri IPv6 Ã¼zerinden de dinlemesi gerektiÄŸini ifade eder.
# 	!!! Subjectte IPv6 iÃ§in atÄ±fta bulunmadÄ±ÄŸÄ± iÃ§in gerek olmayabilir.
#	ğŸ“Œlisten [::]:443 ssl;
#
# 	'server_name akaraca.42.fr;' ifadesi, Nginx'in hangi ana bilgisayar adÄ± veya alan adÄ± ile gelen istekleri yÃ¶nlendirmesi gerektiÄŸini belirtir.
#		'server_name' direktifi, sunucunun hangi istemcileri dinleyeceÄŸini belirler.
#		Bu, Nginx'in gelen istekleri hangi alan adÄ±na veya ana bilgisayar adÄ±na gÃ¶re eÅŸleÅŸtireceÄŸini belirlemek iÃ§in kullanÄ±lÄ±r.
#	ğŸ“Œserver_name akaraca.42.fr;
#
#	 'ssl_certificate /etc/ssl/certs/nginx.crt;' ifadesi, Nginx'in kullanacaÄŸÄ± SSL sertifikasÄ±nÄ±n dosya yolunu belirtir.
#		SSL, sertifikalarÄ±, web sunucularÄ±nÄ±n gÃ¼venli HTTPS baÄŸlantÄ±larÄ± saÄŸlamak iÃ§in kullandÄ±ÄŸÄ± dijital sertifikalardÄ±r.
#	 'ssl_certificate' direktifi, Nginx'in genel anahtar altyapÄ±sÄ±nÄ± (Public Key Infrastructure - PKI) ile imzalanan sertifika dosyasÄ±nÄ±n yolunu tanÄ±mlar.
#	 Bu sertifika, web sitesinin gerÃ§ekliÄŸini doÄŸrulayan bir Ã¼Ã§Ã¼ncÃ¼ taraf (CA - Certificate Authority) tarafÄ±ndan imzalanÄ±r ve ana bilgisayarÄ±n kimliÄŸini doÄŸrulamak iÃ§in kullanÄ±lÄ±r.
#		Web sunucusunun TLS(Transport Layer Security) baÄŸlantÄ±larÄ±nda kullanÄ±lacak ve tarayÄ±cÄ±lardan gelen istemcilere gÃ¼venli bir ÅŸekilde iletiÅŸim kurulmasÄ±nÄ± saÄŸlayacaktÄ±r.
#	ğŸ“Œssl_certificate  /etc/ssl/certs/nginx.crt;
#
# 	'ssl_certificate_key /etc/ssl/private/nginx.key;' ifadesi, Nginx'in kullanacaÄŸÄ± SSL sertifikasÄ±nÄ±n Ã¶zel anahtarÄ±nÄ±n dosya yolunu belirtir.
#		SSL/TLS baÄŸlantÄ±larÄ± gÃ¼venli hale getirmek iÃ§in kullanÄ±lan sertifikalar, asimetrik kriptografi temelinde Ã§alÄ±ÅŸÄ±r ve bir Ã§ift anahtardan oluÅŸur: Ã¶zel anahtar(private key) ve genel anahtar(public key)
#		Ã–zel anahtar, SSL/TLS baÄŸlantÄ±sÄ±nÄ± baÅŸlatan sunucunun gizli anahtarÄ±dÄ±r ve yalnÄ±zca sunucuda saklanÄ±r.
#		Bu anahtar, ÅŸifrelenmiÅŸ verileri Ã§Ã¶zmek ve kimlik doÄŸrulamasÄ± yapmak iÃ§in kullanÄ±lÄ±r.
#		Ã–zel anahtar, yalnÄ±zca sunucu tarafÄ±ndan bilinir ve gÃ¼venli bir ÅŸekilde saklanmalÄ±dÄ±r.
#		Nginx tarafÄ±ndan SSL/TLS baÄŸlantÄ±larÄ±nda kullanÄ±lÄ±r ve sertifika doÄŸrulamasÄ± ve ÅŸifreleme iÅŸlemleri iÃ§in kullanÄ±lÄ±r.
#		Web sunucusunun gÃ¼venli baÄŸlantÄ±lar kurmak ve verileri ÅŸifrelemek iÃ§in kullanÄ±lÄ±r.
#	ğŸ“Œssl_certificate_key /etc/ssl/private/nginx.key;
#
#	 Sertifikasyon dosyalarÄ±nÄ±n oluÅŸturulmasÄ± iÃ§in nginx.sh'Ä±n Ã§alÄ±ÅŸtÄ±rÄ±lmasÄ± gerekmektedir.
#	 'ssl_protocols TLSv1.2 TLSv1.3;' ifadesi, Nginx'in desteklediÄŸi SSL/TLS protokollerini belirtmek iÃ§in kullanÄ±lÄ±r.
#	 'ssl_protocols' direktifi, sunucunun hangi SSL/TLS protokollerini kabul edeceÄŸini belirler.
#		Birden fazla protokol atanabilir, Ã¶rneÄŸin TLSv1.2 TLSv1.3 ...
#		Bu ÅŸekilde Nginx'in yalnÄ±zca TLSv1.2 ve TLSv1.3 protokollerini kabul edeceÄŸi anlamÄ±na gelir.
#		Eski ve gÃ¼vensiz SSL/TLS sÃ¼rÃ¼mleri (Ã¶rneÄŸin, TLSv1.0 TLSv1.1) bu konfigÃ¼rasyonda devre dÄ±ÅŸÄ± bÄ±rakÄ±lÄ±r.
#	ğŸ“Œssl_protocols  TLSv1.2 TLSv1.3;
#
#	 'root' direktifi, Nginx sunucusunun istemcilere servis edeceÄŸi dosyalarÄ±n kÃ¶k dizinini belirtir.
#		Ä°stemci tarafÄ±ndan yapÄ±lan isteklere gÃ¶re, Nginx bu belirtilen kÃ¶k dizin altÄ±nda bulunan dosyalarÄ± sunucudan alÄ±r ve istemciye gÃ¶nderir.
#	 Ä°stemci, Nginx sunucusuna yaptÄ±ÄŸÄ± bir istekte, 'var/www/html' dizininde bulunan dosyalarÄ± alÄ±r ve gÃ¶rÃ¼ntÃ¼ler.
#		Bu, temel olarak web sitesi dosyalarÄ±nÄ±n kÃ¶k dizinini tanÄ±mlar ve kullanÄ±cÄ±larÄ±n web sitesinin iÃ§eriÄŸine eriÅŸebileceÄŸi yerdir.
#	 Ä°stemci, web sitelerine eriÅŸen ve sunucudan iÃ§erik talep eden kiÅŸisel bilgisayarlar, telefonlar vd. cihazlar olabilir.
#	ğŸ“Œroot /var/www/html;
#
#	 'index index.html' ifadesi, Nginx sunucusunun kÃ¶k dizininde(root) bir istemci(web tarayÄ±cÄ±sÄ±) web sitesine istek yaptÄ±ÄŸÄ±nda hangi dosyayÄ± varsayÄ±lan olarak gÃ¶stereceÄŸini belirtir.
#	 'index.html', varsayÄ±lan olarak gÃ¶sterilecek olan dosya adÄ±nÄ± belirtir.
#		Yani, istemci bir klasÃ¶rÃ¼n iÃ§ine istek yaptÄ±ÄŸÄ±nda ve o klasÃ¶rde 'index.html' dosyasÄ± varsa, Nginx bu dosyayÄ± gÃ¶sterecektir.
#		Ã–rneÄŸin, eÄŸer bir istemci 'server_name' direktifindeki adresine(akaraca.42.fr) istek yaparsa, Nginx kÃ¶k dizinindeki 'index.html' dosyasÄ±nÄ± gÃ¶sterecektir.
#	 Bu yapÄ±landÄ±rma, Ã¶zellikle basit statik web sitelerinde yaygÄ±n olarak kullanÄ±lÄ±r.
#	 EÄŸer farklÄ± bir varsayÄ±lan dosya adÄ± kullanmak istenirse, 'index' direktifine farklÄ± dosya adÄ± eklenerek belirtilir.
#		Ã–rneÄŸin, 'index index.php index.html;' ÅŸeklinde belirtilirse, Nginx Ã¶nce 'index.php' dosyasÄ±nÄ± arayacak, eÄŸer bulamazsa 'index.html' dosyasÄ±nÄ± gÃ¶sterecektir.	
#	index index.html;
#		Ancak biz WordPress ve PHP-FPM kullanacaÄŸÄ±mÄ±zdan dolayÄ± '.php' uzantÄ±lÄ± dosyalarÄ± kullanmamÄ±z gerekecektir.
#			WordPress, PHP tabanlÄ± bir iÃ§erik yÃ¶netim sistemidir ve PHP betiklerini kullanarak iÃ§eriÄŸi oluÅŸturur ve iÅŸler.
#			Bu nedenle, WordPress'in dÃ¼zgÃ¼n Ã§alÄ±ÅŸmasÄ± iÃ§in '.php' dosyalarÄ±nÄ±n kullanÄ±lmasÄ± gerekmektedir.
#		WordPress temasÄ± ve eklentileri '.php' uzantÄ±lÄ± dosyalar iÃ§erir  ve bu dosyalarÄ±n Nginx tarafÄ±ndan doÄŸru ÅŸekilde iÅŸlenmesi ve sunulmasÄ± iÃ§in 'index index.php;' ÅŸeklinde bir yapÄ± kullanmanÄ±z gerekecektir.
#	ğŸ“Œindex index.php index.nginx-debian.html;
#
#	 'location /' bloÄŸu, Nginx sunucusuna gelen tÃ¼m istemcilerin isteklerini ele alÄ±r.
#		Ä°stemciden gelen HTTP isteklerini yÃ¶nlendirmek ve belirli iÅŸlemler yapmak iÃ§in kullanÄ±lÄ±r.	
#		Ä°stemciden gelen URI'nin baÅŸlangÄ±cÄ±na eÅŸleÅŸir, yani tÃ¼m istekler iÃ§in geÃ§erli olur.
#		Bu nedenle, bu blok, sunucuya gelen tÃ¼m istekleri ele alÄ±r ve bunlarÄ±n nasÄ±l iÅŸleneceÄŸini belirler.
#		URI, Uniform Resource Identifier'dir (EÅŸgÃ¼dÃ¼mlÃ¼ kaynak tanÄ±mlayÄ±cÄ±sÄ±).
#			URI, bir kaynaÄŸa eriÅŸmek iÃ§in kullanÄ±lan bir adrestir.
#	ğŸ“Œlocation / {
#
#	 'uri' deÄŸiÅŸkeni, istemde bulunan dosyanÄ±n URI'sini temsil eder.
#		Ã–rneÄŸin, 'http://localhost/index.html' isteminde, uri deÄŸiÅŸkeninin deÄŸeri 'index.html' olacaktÄ±r.
#	 'try_files' direktifi, bu blok iÃ§inde belirtilen dosya veya dizinlerin varlÄ±ÄŸÄ±nÄ± kontrol eder ve uygun bir yanÄ±t dÃ¶ndÃ¼rÃ¼r.
#		'$uri' ifadesiyle istemciden gelen URI, mevcut bir dosya veya dizin olup olmadÄ±ÄŸÄ±nÄ± kontrol eder.
#		EÄŸer dosya veya dizin varsa, o iÃ§eriÄŸi istemciye gÃ¶nderir.
#		Ancak, istemciden gelen URI mevcut bir dosya veya dizin deÄŸilse, '$uri/' ifadesiyle bir dizin olarak kontrol eder.
#		EÄŸer dizin varsa ve o dizinde 'index' direkfitiyle belirtilen bir dosya varsa, o dosyanÄ±n iÃ§eriÄŸini gÃ¶nderir.
#		EÄŸer dizin varsa ancak belirtilen bir 'index' dosyasÄ± yoksa, Nginx bu sefer dizindeki dosyalarÄ±n listesini istemciye gÃ¶nderir.
#		EÄŸer hem dosya hem de dizin yoksa, '=404' ifadesi, '404 Not Found HTTP' hatasÄ± dÃ¶ndÃ¼rerek istemciye dosyanÄ±n bulunamadÄ±ÄŸÄ±nÄ± belirtir.
#		Bu ÅŸekilde, istemci tarafÄ±ndan yapÄ±lan isteklerin durumuna gÃ¶re uygun yanÄ±tlar dÃ¶ndÃ¼ren bir yapÄ± saÄŸlanmÄ±ÅŸ olur.
#		Hata sayfasÄ±na yÃ¶nlendirme olmadan Ã¶zel bir yÃ¶nlendirme istenirse bu ÅŸekilde yapÄ±lÄ±r.
#	ğŸ“Œtry_files $uri $uri/ /index.php$is_args$args;
#	#try_files $uri $uri/ =404;
# 	}
#
#	 'location ~ \.php$' ifadesi, nginx'in bir isteÄŸi iÅŸlerken URL'inde ".php" uzantÄ±sÄ± olan dosyalara yÃ¶nelik bir eÅŸleÅŸtirme yapmasÄ±nÄ± saÄŸlar.
#		Bu blok, ".php" uzantÄ±lÄ± dosyalarÄ±n nginx tarafÄ±ndan PHP-FPM (FastCGI Process Manager) veya baÅŸka bir PHP yÃ¼rÃ¼tÃ¼cÃ¼sÃ¼ne yÃ¶nlendirilmesini belirler.
#	 'location': Bu, nginx konfigÃ¼rasyonunda belirli URL kalÄ±plarÄ±na gÃ¶re yapÄ±landÄ±rmalar yapmak iÃ§in kullanÄ±lan bloklardan biridir.
#	 '~': Bu, ifadenin bir dÃ¼zenli ifade(regular expression) olduÄŸunu belirtir.
#		Yani, '.php' ifadesinin dÃ¼zenli ifade olarak iÅŸlenmesini saÄŸlar.
#	 '\.php$': Bu dÃ¼zenli ifade, URL'in sonunda ".php" uzantÄ±sÄ±nÄ± arar.
#	 '$' karakteri URL'nin sonuna geldiÄŸini belirtir.
#	 Bu blok, '.php' uzantÄ±lÄ± dosyalara gelen istekleri yakalar ve ilgili PHP yÃ¼rÃ¼tÃ¼cÃ¼sÃ¼ne yÃ¶nlendirir.
#		Ã–rneÄŸin, eÄŸer PHP-FPM kullanÄ±yorsanÄ±z, bu blok PHP-FPM'e bu dosyayÄ± iÅŸlemesi iÃ§in gÃ¶nderir ve sonuÃ§ olarak PHP kodu Ã§alÄ±ÅŸtÄ±rÄ±lÄ±r ve sonucu kullanÄ±cÄ±ya gÃ¶nderilir.
#	ğŸ“Œlocation ~ \.php$ {
#
#	 'fastcgi_split_path_info' ifadesi, PHP dosyalarÄ±nÄ±n yol bilgisini ayrÄ±ÅŸtÄ±rmak iÃ§in kullanÄ±lÄ±r.
#		Bu ifade, 'fastcgi_param' ile birlikte Ã§alÄ±ÅŸarak, URL iÃ§indeki dosya adÄ±nÄ± ve ek yol bilgisini ayÄ±rÄ±r ve PHP-FPM'ye doÄŸru ÅŸekilde iletilmesini saÄŸlar.
#		AyrÄ±ÅŸtÄ±rÄ±lan deÄŸerler FastCGI parametrelerine atanmaktadÄ±r.
#		Detaylar:
#			'^': Metnin baÅŸlangÄ±cÄ±nda eÅŸleÅŸmesini belirtir.
#				Ã–rneÄŸin, "abcdef" metni '^abc' deseniyle eÅŸleÅŸir, '^dde' deseniyle eÅŸleÅŸmez.
#			'(.+\.php)': URL'de ".php" uzantÄ±sÄ± iÃ§eren dosya adÄ±nÄ± yakalar ve parantez iÃ§ine alÄ±r.
#				'.+' ifadesi, en az bir veya daha fazla karakteri temsil eder, '\.' karakteri noktayÄ± temsil eder ve 'php' kelimesi tam olarak "php" ile eÅŸleÅŸir. 
#			'(/.+)': URL'de baÅŸka bir yol bilgisi parÃ§asÄ±nÄ± yakalr ve parantez iÃ§ine alÄ±r.
#				'/.+' ifadesi, bir eÄŸik Ã§izgi ile baÅŸlayan ve an az bir veya daha fazla karakter iÃ§eren herhangi bir yol bilgisini temsil eder.	
#		Bu ifade, bir URL'de ".php" uzantÄ±lÄ± bir dosya adÄ± ve ek bir yol bilgisi varsa, bu iki parÃ§ayÄ± ayrÄ±ÅŸtÄ±rÄ±r ve PHP-FPM'ye doÄŸru ÅŸekilde iletilmesini saÄŸlar.
#			Ã–rneÄŸin, eÄŸer URL "/example.php/foo/bar" ise, bu ifade dosya adÄ±nÄ± "example.php" ve yol bilgisini "/foo/bar" olarak ayrÄ±ÅŸtÄ±rÄ±r ve PHP-FPM'ye "/example.php" dosyasÄ±nÄ± ve "/foo/bar" yol bilgisini iÅŸlemesi iÃ§in iletilmesini saÄŸlar.
#			Bu ÅŸekilde, PHP kodu doÄŸru ÅŸekilde Ã§alÄ±ÅŸtÄ±rÄ±lÄ±r ve sonuÃ§ kullanÄ±cÄ±ya gÃ¶nderilir.
#	 'FastCGI' nedir:
#		FastCGI (Fast Common Gateway Interface), CGI'nin (Common Gateway Interface) daha hÄ±zlÄ± ve verimli bir versiyonudur.
#		CGI, web sunucusu ile dÄ±ÅŸ kaynaklÄ± programlar arasÄ±nda iletiÅŸim kurmaya olanak tanÄ±yan bir arayÃ¼zdÃ¼r.
#		Ancak, CGI'nin performansÄ± dÃ¼ÅŸÃ¼ktÃ¼r Ã§Ã¼nkÃ¼ her istek iÃ§in ayrÄ± bir dÄ±ÅŸ program Ã§alÄ±ÅŸtÄ±rÄ±lÄ±r ve sonlandÄ±rÄ±lÄ±r.
#		Bu nedenle, yoÄŸun trafikli web sitelerinde CGI kullanmak verimsiz olabilir.
#	ğŸ“Œfastcgi_split_path_info ^(.+\.php)(/.+)$;
#
#		 'fastcgi_pass' direktifi, PHP-FPM hizmetine yÃ¶nlendirmeyi saÄŸlayan bir nginx direktifidir.
#			PHP dosyalarÄ±nÄ± Ã§alÄ±ÅŸtÄ±rmak ve sonuÃ§larÄ± nginx'e geri gÃ¶ndermek iÃ§in kullanÄ±lan bir PHP FastCGI yÃ¶neticisidir.
#			'fastcgi_pass' ile belirtilen deÄŸer, PHP-FPM hizmetinin adresini ve port numarasÄ±nÄ± belirtir.
#				'fastcgi_pass wordpress:9000;' ifadesinde 'wordpress' ifadesi, docker-compose.yml dosyasÄ±nda belirtilen PHP-FPM hizmetinin adÄ±nÄ± temsil eder ve '9000' ise PHP-FPM hizmetinin dinlemesi gereken port numarasÄ±nÄ± gÃ¶sterir.
# 		ğŸ“Œfastcgi_pass wordpress:9000;
#
#		 'fastcgi_index' direktifi, nginx'in PHP dosyalarÄ±nÄ± Ã§alÄ±ÅŸtÄ±rÄ±rken hangi dosyanÄ±n varsayÄ±lan olarak Ã§alÄ±ÅŸtÄ±rÄ±lacaÄŸÄ±nÄ± belirlemek iÃ§in kullanÄ±lÄ±r.
#			Yani, eÄŸer bir URL'de belirtilen dosya adÄ± yoksa, 'fastcgi_index' ile belirtilen dosya adÄ± kullanÄ±lÄ±r.
#		 Ã–zellikle PHP ile Ã§alÄ±ÅŸÄ±rken, genellikle 'index.php' dosyasÄ± ana dosyasÄ±dÄ±r.
#			Bu nedenle, 'fastcgi_index index.php;' ifadesi, eÄŸer bir URL'de belirtilen dosya adÄ± yoksa ve dizinde 'index.php' dosyasÄ± varsa, nginx'in 'index.php' dosyasÄ±nÄ± varsayÄ±lan olarak Ã§alÄ±ÅŸtÄ±rmasÄ±nÄ± saÄŸlar.
#			Ã–rneÄŸin, 'htpp://example.com' URL'sine yapÄ±lan bir istek, nginx tarafÄ±ndan 'http://example.com/index.php' olarak iÅŸlenecektir, Ã§Ã¼nkÃ¼ 'index.php' varsayÄ±lan dosya adÄ± olarak belirtilmiÅŸtir.
#			Bu, PHP dosyalarÄ±nÄ± Ã§alÄ±ÅŸtÄ±ran uygulamalarda yaygÄ±n olarak kullanÄ±lan bir yÃ¶ntemdir ve 'fastcgi_index' direktifi, doÄŸrudan PHP dosyalarÄ±na eriÅŸimde kullanÄ±cÄ±larÄ±n URL'lerini basitleÅŸtirir.
# 		ğŸ“Œfastcgi_index index.php;
#
#		 'include fastcgi_params;' ifadesi, nginx'in PHP-FPM veya diÄŸer FastCGI programÄ±yla iletiÅŸim kurarken kullanÄ±lan FastCGI parametrelerini iÃ§eren bir dosyanÄ±n dahil edilmesini saÄŸlar. 
#		 'fastcgi_params' dosyasÄ±, nginx tarafÄ±ndan varsayÄ±lan olarak saÄŸlanan FastCGI parametrelerini iÃ§erir ve bu parametreler, nginx ve FastCGI programlarÄ± arasÄ±ndaki isteklerin ve cevaplarÄ±n dÃ¼zgÃ¼n ÅŸekilde iÅŸlenmesini saÄŸlar.
#			Bu parametreler, PHP veya baÅŸka bir FastCGI programÄ±nÄ± Ã§alÄ±ÅŸtÄ±ran uygulamalarda Ã¶nemlidir, Ã§Ã¼nkÃ¼ doÄŸru bilgilerin iletilmesini ve iÅŸlenmesini saÄŸlar.
#		 'include fastcgi_params;' ifadesini kullanmak, FastCGI parametrelerini tekrar tekrar belirtmek yerine, bu parametreleri tek bir yerde yÃ¶netmeyi ve birden fazla yerde kullanmayÄ± kolaylaÅŸtÄ±rÄ±r.
#			AyrÄ±ca, bu yÃ¶ntem, gÃ¼ncelleÅŸtirmeler veya deÄŸiÅŸiklikler yapÄ±ldÄ±ÄŸÄ±nda tek bir dosyayÄ± gÃ¼ncelleÅŸtirmekle yetinmenizi saÄŸlar, bÃ¶ylece ayarlarÄ±nÄ±zÄ±n tutarlÄ± ve gÃ¼ncel kalmasÄ±nÄ± saÄŸlar.
#		 'fastcgi_params' dosyasÄ±, genellikle Nginx'i yÃ¼klerken veya yapÄ±landÄ±rÄ±rken, Nginx paketiyle birlikte varsayÄ±lan 'fastcgi_params' dosyasÄ± otomatik olarak oluÅŸturulur ve  '/etc/nginx/fastcgi_params' gibi bir konumda yer alÄ±r.
#			Bu dosya, Nginx'in FastCGI uygulamalarÄ± (Ã¶rneÄŸin PHP-FPM) ile etkileÅŸim kurarken gereken temel parametreleri tanÄ±mlar.
# 		ğŸ“Œinclude fastcgi_params;
#
#		 'fastcgi_param', Nginx'in PHP-FPM gibi FastCGI uygulamalarÄ±na Ã§eÅŸitli ortam deÄŸiÅŸkenlerini aktarmasÄ±nÄ± saÄŸlayan bir Nginx direktifidir.
#			Bu deÄŸiÅŸken, PHP-FPM'ye Ã¶zel bilgileri aktarmak iÃ§in kullanÄ±lÄ±r ve PHP-FPM'nin doÄŸru ÅŸekilde Ã§alÄ±ÅŸmasÄ±nÄ± ve sonuÃ§larÄ± iÅŸlemesini saÄŸlar.
#		 'fastcgi_param' ile belirtilen deÄŸiÅŸkenler, HTTP isteÄŸi veya Nginx'in diÄŸer ayarlarÄ±nda gelen deÄŸerlere dayanabilir.
#			Ã–rneÄŸin, genellikle 'SCRIPT_FILENAME', 'SCRIPT_NAME', 'REQUEST_METHOD', 'QUERY_STRING' gibi deÄŸiÅŸkenler PHP-FPM'ye aktarÄ±larak PHP kodunun doÄŸru ÅŸekilde Ã§alÄ±ÅŸmasÄ± iÃ§in gereklidir.
#		 'fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;' direktifi, PHP-FPM ile iletilen dosya adÄ±nÄ± belirler.
#			'$document_root' deÄŸiÅŸkeni, PHP dosyasÄ±nÄ±n dizinini temsil eder. ve '$fastcgi_script_name' deÄŸiÅŸkeni ise PHP dosyasÄ±nÄ±n adÄ±nÄ± iÃ§erir.
#			Bu direktif sayesinde, PHP-FPM, doÄŸru dosyayÄ± Ã§alÄ±ÅŸtÄ±rabilir ve PHP kodunu iÅŸleyebilir.
#			Ã–rnek, Nginx sunucunuzda 'var/www/html' dizini, PHP dosyalarÄ±nÄ±zÄ±n yer aldÄ±ÄŸÄ± kÃ¶k dizinidir ve 'example.php' adÄ±nda bir PHP dosyanÄ±z var ve bu dosya '/var/www/html' dizini iÃ§indedir.
#				O zaman direktif ÅŸu ÅŸekilde Ã§alÄ±ÅŸÄ±r:
#					'$document_root' deÄŸiÅŸkeni, 'var/www/html' deÄŸerini temsil eder(kÃ¶k dizini).
#					'$fastcgi_script_name' deÄŸiÅŸkeni, talepte bulunan PHP dosyasÄ±nÄ±n adÄ±nÄ± iÃ§erir.
#						Ã–rneÄŸin, eÄŸer kullanÄ±cÄ± '/example.php' sayfasÄ±nÄ± talep ediyorsa, '$fastcgi_script_name' deÄŸiÅŸkeni '/example.php' deÄŸerini alÄ±r.
#			SonuÃ§ olarak, 'fastcgi_param SCRIPT_FILENAME /var/www/html/example.php;' ÅŸeklinde bir deÄŸer oluÅŸur.
#			Bu deÄŸer PHP-FPM tarafÄ±ndan talep edilen dosyanÄ±n tam yolu olan '/var/www/html/example.php' dosyasÄ±nÄ± belirtir.
#			BÃ¶ylece PHP-FPM, 'example.php' dosyasÄ±nÄ± Ã§alÄ±ÅŸtÄ±rabilir ve PHP kodunu iÅŸleyebilir.
#			EÄŸerki bu direktif kullanÄ±lmaz ise, PHP-FPM, talep edilen PHP dosyasÄ±nÄ±n tam yolunu bilemeyeceÄŸi iÃ§in PHP dosyasÄ±nÄ± Ã§alÄ±ÅŸtÄ±ramaz ve iÅŸleyemez.
# 		ğŸ“Œfastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
#
#		 'fastcgi_param SCRIPT_NAME $fastcgi_script_name;' direktifi, 'SCRIPT_NAME' adlÄ± bir ortam deÄŸiÅŸkeni tanÄ±mlar ve ona '$fastcgi_script_name' deÄŸiÅŸkeninin deÄŸerini atar.
#			Burada 'SCRIPT_NAME' ortam deÄŸiÅŸkenine 'example.php' deÄŸerini atar.
# 		ğŸ“Œfastcgi_param SCRIPT_NAME $fastcgi_script_name;
#
#		 'fastcgi_param PATH_INFO $fastcgi_path_info;' direktifi, 'PATH_INFO' adlÄ± bir ortam deÄŸiÅŸkeni tanÄ±mlar ve ona '$fastcgi_path_info' deÄŸiÅŸkeninin deÄŸerini atar.
#			Bu deÄŸiÅŸken ekstra yol bilgisin iÃ§erir.
#			Ã–rneÄŸin, PHP-FPM tarafÄ±ndan Ã§alÄ±ÅŸtÄ±rÄ±lan bir PHP dosyasÄ± ÅŸu ÅŸekilde bir URI ile Ã§aÄŸrÄ±ldÄ±: 'http://example.com/user/profile.php/info'
#				Bu durumda, 'PATH_INFO' deÄŸiÅŸkeni, '/info' deÄŸerini alacaktÄ±r.
#				Yani, ekstra yol bilgisini iÃ§erir ve dosyasÄ±nÄ±n adÄ±ndan sonraki ekstra yolu temsil eder.
# 		ğŸ“Œfastcgi_param PATH_INFO $fastcgi_path_info;
# 	}
#
#	'location ~ ^/adminer(/.*$|$)' ifadesi, "/adminer" veya "/adminer/" ile baÅŸlayan URL yollarÄ±nÄ± hedef alÄ±r ve o URL yollarÄ±na gelen isteklere nasÄ±l yanÄ±t verileceÄŸini tanÄ±mlar.
#		Bu ÅŸekilde belirli bir URL yoluna gelen istekler iÃ§in Ã¶zel iÅŸlemler veya yÃ¶nlendirmelere yapÄ±labiliyor.
#	'~': DÃ¼zenli ifadeleri tanÄ±mak iÃ§in kullanÄ±lan bir iÅŸaret.
#		Yani bu blok, belirtilen URL yolunu dÃ¼zenli ifade olarak ele alacaktÄ±r.
#	'^/adminer': URL yolunun baÅŸÄ±ndaki kÄ±smÄ±n ne olmasÄ± gerektiÄŸini belirtir.
#		Yani "/adminer" ile baÅŸlayan URL yollarÄ±nÄ± ele alacaktÄ±r.
#	'(/.*$|$)': Bu kÄ±sÄ±m, URL yolunun devam eden kÄ±smÄ±nÄ± belirtir.
#		'(/.*$)' ile baÅŸlar, yani "/adminer" sonrasÄ±nda gelen herhangi bir karakter dizinin kabul eder.
#		'($|$)': ile biter, yani URL yolunun tamamÄ±nÄ±n "/adminer" olmasÄ±nÄ± da kabul eder.
# 	ğŸ“Œlocation ~ ^/adminer(/.*$|$) {
# 		ğŸ“Œfastcgi_index index.php;
# 		ğŸ“Œinclude /etc/nginx/fastcgi_params;
# 		ğŸ“Œfastcgi_param SCRIPT_FILENAME /var/www/html/index.php;
# 		ğŸ“Œfastcgi_pass adminer:9000;
# 	}
# }

#############################################################################################################################################
